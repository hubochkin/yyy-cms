type Category {
  name: String
  icon: String
  icons: JSON
  games(sort: String, limit: Int, start: Int, where: JSON): [Game]
  new_game_types(sort: String, limit: Int, start: Int, where: JSON): [NewGameType]
  new_games(sort: String, limit: Int, start: Int, where: JSON): [NewGame]
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input CategoryInput {
  name: String
  games: [ID]
  new_game_types: [ID]
  icon: String
  icons: JSON
  new_games: [ID]
  posts: [ID]
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createGameInput {
  data: GameInput
}

type createGamePayload {
  game: Game
}

input createGamePlatfomInput {
  data: GamePlatfomInput
}

type createGamePlatfomPayload {
  gamePlatfom: GamePlatfom
}

input createIpsdomainInput {
  data: IpsdomainInput
}

type createIpsdomainPayload {
  ipsdomain: Ipsdomains
}

input createNewGameInput {
  data: NewGameInput
}

type createNewGamePayload {
  newGame: NewGame
}

input createNewGameTypeInput {
  data: NewGameTypeInput
}

type createNewGameTypePayload {
  newGameType: NewGameType
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createRootlinkInput {
  data: RootlinkInput
}

type createRootlinkPayload {
  rootlink: Rootlink
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteGameInput {
  where: InputID
}

type deleteGamePayload {
  game: Game
}

input deleteGamePlatfomInput {
  where: InputID
}

type deleteGamePlatfomPayload {
  gamePlatfom: GamePlatfom
}

input deleteIpsdomainInput {
  where: InputID
}

type deleteIpsdomainPayload {
  ipsdomain: Ipsdomains
}

input deleteNewGameInput {
  where: InputID
}

type deleteNewGamePayload {
  newGame: NewGame
}

input deleteNewGameTypeInput {
  where: InputID
}

type deleteNewGameTypePayload {
  newGameType: NewGameType
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteRootlinkInput {
  where: InputID
}

type deleteRootlinkPayload {
  rootlink: Rootlink
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCategoryInput {
  name: String
  games: [ID]
  new_game_types: [ID]
  icon: String
  icons: JSON
  new_games: [ID]
  posts: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editGameInput {
  Title: String
  GameId: String
  priority: Int
  category: ID
  isHot: Boolean
  isNew: Boolean
  titleImage: ID
  backgroundImages: [ID]
  isActive: Boolean
  descripton: String
  game_platfom: ID
}

input editGamePlatfomInput {
  Title: String
  games: [ID]
}

input editIpsdomainInput {
  Link: String
  rootlink: ID
}

input editNewGameInput {
  title: String
  identifier: String
  provider: String
  producer: String
  category: ID
  has_freespins: Boolean
  feature_group: String
  devices: JSON
  payout: String
  description: String
  volatility_rating: String
  hd: Boolean
  restrictions: JSON
}

input editNewGameTypeInput {
  Title: String
  identifier: String
  category: ID
  provider: String
}

input editPostInput {
  Title: String
  Text: String
  Image: [ID]
  category: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editRootlinkInput {
  ipsdomain: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type Game {
  Title: String!
  GameId: String!
  priority: Int
  category: Category
  isHot: Boolean
  isNew: Boolean
  titleImage: UploadFile
  isActive: Boolean!
  descripton: String
  game_platfom: GamePlatfom
  backgroundImages(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input GameInput {
  Title: String!
  GameId: String!
  priority: Int
  category: ID
  isHot: Boolean
  isNew: Boolean
  titleImage: ID
  backgroundImages: [ID]
  isActive: Boolean!
  descripton: String
  game_platfom: ID
}

type GamePlatfom {
  Title: String
  games(sort: String, limit: Int, start: Int, where: JSON): [Game]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input GamePlatfomInput {
  Title: String
  games: [ID]
}

input InputID {
  id: ID!
}

input IpsdomainInput {
  Link: String
  rootlink: ID
}

type Ipsdomains {
  Link: String
  rootlink: Rootlink
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | GamePlatfom | createGamePlatfomPayload | updateGamePlatfomPayload | deleteGamePlatfomPayload | Game | createGamePayload | updateGamePayload | deleteGamePayload | Ipsdomains | createIpsdomainPayload | updateIpsdomainPayload | deleteIpsdomainPayload | NewGameType | createNewGameTypePayload | updateNewGameTypePayload | deleteNewGameTypePayload | NewGame | createNewGamePayload | updateNewGamePayload | deleteNewGamePayload | Post | createPostPayload | updatePostPayload | deletePostPayload | Rootlink | createRootlinkPayload | updateRootlinkPayload | deleteRootlinkPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createGamePlatfom(input: createGamePlatfomInput): createGamePlatfomPayload
  updateGamePlatfom(input: updateGamePlatfomInput): updateGamePlatfomPayload
  deleteGamePlatfom(input: deleteGamePlatfomInput): deleteGamePlatfomPayload
  createGame(input: createGameInput): createGamePayload
  updateGame(input: updateGameInput): updateGamePayload
  deleteGame(input: deleteGameInput): deleteGamePayload
  createIpsdomain(input: createIpsdomainInput): createIpsdomainPayload
  updateIpsdomain(input: updateIpsdomainInput): updateIpsdomainPayload
  deleteIpsdomain(input: deleteIpsdomainInput): deleteIpsdomainPayload
  createNewGameType(input: createNewGameTypeInput): createNewGameTypePayload
  updateNewGameType(input: updateNewGameTypeInput): updateNewGameTypePayload
  deleteNewGameType(input: deleteNewGameTypeInput): deleteNewGameTypePayload
  createNewGame(input: createNewGameInput): createNewGamePayload
  updateNewGame(input: updateNewGameInput): updateNewGamePayload
  deleteNewGame(input: deleteNewGameInput): deleteNewGamePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createRootlink(input: createRootlinkInput): createRootlinkPayload
  updateRootlink(input: updateRootlinkInput): updateRootlinkPayload
  deleteRootlink(input: deleteRootlinkInput): deleteRootlinkPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type NewGame {
  title: String
  identifier: String
  provider: String
  producer: String
  category: Category
  has_freespins: Boolean
  feature_group: String
  devices: JSON
  payout: String
  description: String
  volatility_rating: String
  hd: Boolean
  restrictions: JSON
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input NewGameInput {
  title: String
  identifier: String
  provider: String
  producer: String
  category: ID
  has_freespins: Boolean
  feature_group: String
  devices: JSON
  payout: String
  description: String
  volatility_rating: String
  hd: Boolean
  restrictions: JSON
}

type NewGameType {
  Title: String
  identifier: String
  category: Category
  provider: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input NewGameTypeInput {
  Title: String
  identifier: String
  category: ID
  provider: String
}

type Post {
  Title: String
  Text: String
  category: Category
  Image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input PostInput {
  Title: String
  Text: String
  Image: [ID]
  category: ID
}

type Query {
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  gamePlatfom(id: ID!): GamePlatfom
  gamePlatfoms(sort: String, limit: Int, start: Int, where: JSON): [GamePlatfom]
  game(id: ID!): Game
  games(sort: String, limit: Int, start: Int, where: JSON): [Game]
  ipsdomain(id: ID!): Ipsdomains
  ipsdomains(sort: String, limit: Int, start: Int, where: JSON): [Ipsdomains]
  newGameType(id: ID!): NewGameType
  newGameTypes(sort: String, limit: Int, start: Int, where: JSON): [NewGameType]
  newGame(id: ID!): NewGame
  newGames(sort: String, limit: Int, start: Int, where: JSON): [NewGame]
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  rootlink(id: ID!): Rootlink
  rootlinks(sort: String, limit: Int, start: Int, where: JSON): [Rootlink]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Rootlink {
  ipsdomain: Ipsdomains
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input RootlinkInput {
  ipsdomain: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateGameInput {
  where: InputID
  data: editGameInput
}

type updateGamePayload {
  game: Game
}

input updateGamePlatfomInput {
  where: InputID
  data: editGamePlatfomInput
}

type updateGamePlatfomPayload {
  gamePlatfom: GamePlatfom
}

input updateIpsdomainInput {
  where: InputID
  data: editIpsdomainInput
}

type updateIpsdomainPayload {
  ipsdomain: Ipsdomains
}

input updateNewGameInput {
  where: InputID
  data: editNewGameInput
}

type updateNewGamePayload {
  newGame: NewGame
}

input updateNewGameTypeInput {
  where: InputID
  data: editNewGameTypeInput
}

type updateNewGameTypePayload {
  newGameType: NewGameType
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateRootlinkInput {
  where: InputID
  data: editRootlinkInput
}

type updateRootlinkPayload {
  rootlink: Rootlink
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
